Author: Jamie Strandboge <jamie@ubuntu.com>
Description: empty out IPT_MODULES and update documentation regarding modern
 use of connection tracking modules.
Index: ufw-0.36/conf/ufw.defaults
===================================================================
--- ufw-0.36.orig/conf/ufw.defaults
+++ ufw-0.36/conf/ufw.defaults
@@ -34,13 +34,14 @@ MANAGE_BUILTINS=no
 # only enable if using iptables backend
 IPT_SYSCTL=#CONFIG_PREFIX#/ufw/sysctl.conf
 
-# Extra connection tracking modules to load. Complete list can be found in
-# net/netfilter/Kconfig of your kernel source. Some common modules:
+# Extra connection tracking modules to load. IPT_MODULES should typically be
+# empty for new installations and modules added only as needed. See
+# 'CONNECTION HELPERS' from 'man ufw-framework' for details. Complete list can
+# be found in net/netfilter/Kconfig of your kernel source. Some common modules:
 # nf_conntrack_irc, nf_nat_irc: DCC (Direct Client to Client) support
 # nf_conntrack_netbios_ns: NetBIOS (samba) client support
 # nf_conntrack_pptp, nf_nat_pptp: PPTP over stateful firewall/NAT
 # nf_conntrack_ftp, nf_nat_ftp: active FTP support
 # nf_conntrack_tftp, nf_nat_tftp: TFTP support (server side)
 # nf_conntrack_sane: sane support
-IPT_MODULES="nf_conntrack_ftp nf_nat_ftp nf_conntrack_netbios_ns"
-
+IPT_MODULES=""
Index: ufw-0.36/doc/ufw-framework.8
===================================================================
--- ufw-0.36.orig/doc/ufw-framework.8
+++ ufw-0.36/doc/ufw-framework.8
@@ -130,6 +130,11 @@ IPT_MODULES in #CONFIG_PREFIX#/default/u
   nf_conntrack_tftp
   nf_nat_tftp
   nf_conntrack_sane
+.PP
+Unconditional loading of connection tracking modules (nf_conntrack_*) in this
+manner is deprecated. \fBufw\fR continues to support the functionality but new
+configuration should only contain the specific modules required for the site.
+For more information, see CONNECTION HELPERS.
 
 .SH "KERNEL PARAMETERS"
 .PP
@@ -241,6 +246,51 @@ Add the necessary \fBufw\fR rules:
  ufw route allow in on eth0 to 10.0.0.2 port 80 proto tcp
  ufw allow in on eth1 from 10.0.0.100 to any port 22 proto tcp
 
+.SH "CONNECTION HELPERS"
+.PP
+Various protocols require the use of netfilter connection tracking helpers to
+group related packets into RELATED flows to make rulesets clearer and more
+precise. For example, with a couple of kernel modules and a couple of rules, a
+ruleset could simply allow a connection to FTP port 21, then the kernel would
+examine the traffic and mark the other FTP data packets as RELATED to the
+initial connection.
+.PP
+When the helpers were first introduced, one could only configure the modules as
+part of module load (eg, if your FTP server listened on a different port than
+21, you'd have to load the nf_conntrack_ftp module specifying the correct
+port). Over time it was understood that unconditionally using connection
+helpers could lead to abuse, in part because some protocols allow user
+specified data that would allow traversing the firewall in undesired ways. As
+of kernel 4.7, automatic conntrack helper assignment (ie, handling packets for
+a given port and all IP addresses) is disabled (the old behavior can be
+restored by setting net/netfilter/nf_conntrack_helper=1 in
+#CONFIG_PREFIX#/ufw/sysctl.conf). Firewalls should now instead use the CT
+target to associate traffic with a particular helper and then set RELATED rules
+to use the helper. This allows sites to tailor the use of helpers and help
+avoid abuse.
+.PP
+In general, to use helpers securely, the following needs to happen:
+.IP 1.
+net/netfilter/nf_conntrack_helper should be set to 0 (default)
+.IP 2.
+create a rule for the start of a connection (eg for FTP, port 21)
+.IP 3.
+create a helper rule to associate the helper with this connection
+.IP 4.
+create a helper rule to associate a RELATED flow with this connection
+.IP 5.
+if needed, add the corresponding nf_conntrack_* module to IPT_MODULES
+.IP 6.
+optionally add the corresponding nf_nat_* module to IPT_MODULES
+.PP
+In general it is desirable to make connection helper rules as specific as
+possible and ensure anti\-spoofing is correctly setup for your site to avoid
+security issues in your ruleset. For more information, see ANTI\-SPOOFING,
+above, and <https://home.regit.org/netfilter-en/secure-use-of-helpers/>.
+.PP
+Currently helper rules must be managed in via the RULES FILES. A future version
+of \fBufw\fR will introduce syntax for working with helper rules.
+
 .SH NOTES
 .PP
 When using ufw with libvirt and bridging, packets may be blocked. The
Index: ufw-0.36/tests/unit/test_backend.py
===================================================================
--- ufw-0.36.orig/tests/unit/test_backend.py
+++ ufw-0.36/tests/unit/test_backend.py
@@ -41,8 +41,7 @@ class BackendTestCase(unittest.TestCase)
                           "drop")
         self.assertEquals(self.backend.defaults['default_output_policy'],
                           "accept")
-        self.assertEquals(self.backend.defaults['ipt_modules'],
-                        'nf_conntrack_ftp nf_nat_ftp nf_conntrack_netbios_ns')
+        self.assertTrue("ipt_modules" not in self.backend.defaults)
         self.assertEquals(self.backend.defaults['loglevel'], 'low')
         self.assertEquals(self.backend.defaults['manage_builtins'], 'no')
         self.assertEquals(self.backend.defaults['enabled'], 'no')
Index: ufw-0.36/tests/unit/test_backend_iptables.py
===================================================================
--- ufw-0.36.orig/tests/unit/test_backend_iptables.py
+++ ufw-0.36/tests/unit/test_backend_iptables.py
@@ -628,8 +628,7 @@ ports=80/tcp
     def test__get_defaults(self):
         '''Test _get_defaults()'''
         self.backend._get_defaults()
-        for k in ['ipt_modules',
-                  'default_output_policy',
+        for k in ['default_output_policy',
                   'default_input_policy',
                   'default_forward_policy',
                   'loglevel',
