commit a66d32e34a378604d3ebce3675ec2ed650ea769c
Author: Jamie Strandboge <jamie@ubuntu.com>
Date:   Tue Jan 21 15:23:57 2020 -0600

    src/util.py: search for iptables when exe is not specified
    
    We prefer to hardcode the iptables dir in common.py, but we do not
    import common.py here. While internally ufw always uses common.py to
    determine the path, _find_system_iptables() is implemented for
    get_iptables_version() and get_netfilter_capabilities() so as to not
    break API for external consumers since these have historically used a
    default for 'exe'.

Index: ufw-0.36/src/util.py
===================================================================
--- ufw-0.36.orig/src/util.py
+++ ufw-0.36/src/util.py
@@ -729,8 +729,31 @@ def in_network(tested_add, tested_net, v
     return network == orig_network
 
 
-def get_iptables_version(exe="/sbin/iptables"):
+# We prefer to hardcode the iptables dir in common.py, but we do not import
+# common.py here. While internally ufw always uses common.py to determine the
+# path, _find_system_iptables() is implemented for get_iptables_version() and
+# get_netfilter_capabilities() so as to not break API for external consumers
+# since these have historically used a default for 'exe'.
+def _find_system_iptables():
+    exe = ""
+    for d in ["/sbin", "/bin",
+              "/usr/sbin", "/usr/bin",
+              "/usr/local/sbin", "/usr/local/bin"]:
+        exe = os.path.join(d, "iptables")
+        if os.path.exists(exe):
+            break
+        else:
+            exe = ""
+    if exe == "":
+        raise OSError(errno.ENOENT, "Could not find iptables")
+    return exe
+
+
+def get_iptables_version(exe=None):
     '''Return iptables version'''
+    if exe is None:
+        exe = _find_system_iptables()
+
     (rc, out) = cmd([exe, '-V'])
     if rc != 0:
         raise OSError(errno.ENOENT, "Error running '%s'" % (exe))
@@ -739,7 +762,7 @@ def get_iptables_version(exe="/sbin/ipta
 
 
 # must be root, so don't report coverage in unit tests
-def get_netfilter_capabilities(exe="/sbin/iptables", do_checks=True):
+def get_netfilter_capabilities(exe=None, do_checks=True):
     '''Return capabilities set for netfilter to support new features. Callers
        must be root.'''
     def test_cap(exe, chain, rule):
@@ -752,6 +775,9 @@ def get_netfilter_capabilities(exe="/sbi
     if do_checks and os.getuid() != 0:
         raise OSError(errno.EPERM, "Must be root")
 
+    if exe is None:
+        exe = _find_system_iptables()
+
     caps = []
 
     chain = "ufw-caps-test"
