.TH "UFW ON SNAPPY" "8" "" "November 2015" "November 2015"

.SH NAME
ufw on snappy \- using ufw on snappy
.PP
.SH DESCRIPTION
This program is for managing a Linux firewall and aims to provide an easy to
use interface for the admin user. This interface is targeted primarily towards
administering a bastion firewall.

\fBufw\fR packaged as a snap is very similar to \fBufw\fR packaged on a
traditional Linux distribution.

.SH COMMANDS
.TP
ufw.doc
documentation for \fBufw\fR
.TP
ufw.cmd
command line interface to \fBufw\fR
.TP
ufw.init
lowlevel inititialization script
.TP
snappy config ufw
configuration directives exposed via \fBsnappy config\fB

.SH "GETTING STARTED"
.PP
When \fBufw\fR is installed it is disabled by default. Before it can be
enabled, the system must have the following kernel modules loaded:

  - iptable_filter
  - ip6table_filter

On Ubuntu Core these are loaded using the \fBload\-kernel\-modules\fR
declaration in the config for ubuntu\-core. Eg:

  $ snappy config ubuntu\-core > ./config

Modify ./config to have:

  config:
    ubuntu\-core:
      ...
      load\-kernel\-modules:
      - ip6table_filter
      - iptable_filter
      ...

Then run:

  $ sudo snappy config ubuntu\-core ./config

Then reboot and ip6table_filter and iptable_filter should be loaded into the
kernel.

Now you can use \fBufw\fR like normal. For example, to enable the firewall,
allow ssh access, enable logging, and check the status of the firewall,
perform:

  $ sudo ufw.cmd allow ssh/tcp
  $ sudo ufw.cmd logging low
  $ sudo ufw.cmd enable
  $ sudo ufw.cmd status verbose
  Status: active
  Logging: on (low)
  Default: deny (incoming), allow (outgoing), disabled (routed)
  New profiles: skip

  To                         Action      From
  --                         ------      ----
  22/tcp                     ALLOW IN    Anywhere
  22/tcp (v6)                ALLOW IN    Anywhere (v6)

\fBufw\fR integrates into the boot sequence by providing the \fBufw.src\fR
service. It simply calls \fBufw.init start\fR during boot. Service logs can be
seen with:

  $ sudo snappy service logs ufw

.SH UFW FRAMEWORK
The term \fBufw\-framework\fR predates snappy and the \fBufw\-framework\fR
described in the \fBufw\fR documentation should not be confused with snappy
frameworks. Put simply, \fBufw\fR is an app snap and doesn't provide framework
services for other snaps to consume.

On a snappy\-based system apps have access to a read\-only area and a writable
area. After initial install on service start, \fBufw\fR will copy the default
configuration from the read\-only area in $SNAP_APP_PATH to the writable area
in $SNAP_APP_DATA_PATH. If you need or want to modify the configuration files
as described in the \fBufw\-framework\fB documentation, look for these files
in $SNAP_APP_DATA_PATH. Upgrades are handled similarly to an traditional
Ubuntu system, if the configuration files in $SNAP_APP_DATA_PATH match the
previously shipped version, the files will be updated to the new version,
otherwise the files that are different are logged to the service log (see
above) so that the files may be merged manually.

.SH AUTHOR
.PP
ufw is Copyright 2008-2015, Canonical Ltd.

.PP
ufw and this manual page was originally written by Jamie Strandboge <jamie@canonical\&.com>
